Checks: >
  readability-identifier-naming,
  cert-dcl58-cpp,
  google-default-arguments,
  google-readability-casting,
  modernize-make-shared,
  modernize-make-unique,
  modernize-pass-by-value,
  modernize-use-override,
  modernize-use-designated-initializers,
  modernize-return-braced-init-list,
  performance-inefficient-string-concatenation,
  performance-unnecessary-value-param,
  performance-unnecessary-copy-initialization,
  performance-type-promotion-in-math-fn,
  performance-noexcept-move-constructor,
  performance-noexcept-destructor,
  performance-no-automatic-move,
  performance-move-const-arg,
  performance-inefficient-vector-operation,
  performance-inefficient-algorithm,
  performance-implicit-conversion-in-loop,
  readability-avoid-const-params-in-decls,
  readability-inconsistent-declaration-parameter-name,
  readability-named-parameter,
  readability-simplify-boolean-expr,
  readability-use-anyofallof,
  bugprone-use-after-move,
  bugprone-unchecked-optional-access,
  hicpp-exception-baseclass,
  misc-use-internal-linkage,
  misc-use-anonymous-namespace,
  misc-unused-parameters,
  misc-unconventional-assign-operator,
  misc-throw-by-value-catch-by-reference,
  misc-redundant-expression,
  misc-definitions-in-headers,
  misc-const-correctness,
  bugprone-shared-ptr-array-mismatch,
  bugprone-optional-value-conversion,
  bugprone-move-forwarding-reference,
  bugprone-virtual-near-miss,
  bugprone-unhandled-self-assignment,
  modernize-use-ranges

CheckOptions:
  - { key: readability-identifier-naming.ClassCase,                value: CamelCase }
  - { key: readability-identifier-naming.ClassMemberPrefix,        value: m_        }
  - { key: readability-identifier-naming.PrivateMemberPrefix,      value: m_        }
  - { key: readability-identifier-naming.ProtectedMemberPrefix,    value: m_        }
  - { key: readability-identifier-naming.ConstantMemberPrefix,     value: ''        }
  - { key: readability-identifier-naming.ClassConstantPrefix,      value: m_        }
  - { key: readability-identifier-naming.VariableCase,             value: camelBack }
  - { key: readability-identifier-naming.ParameterCase,            value: camelBack }
  - { key: readability-identifier-naming.ConstantMemberCase,       value: camelBack }
  - { key: readability-identifier-naming.ConstexprVariableCase,    value: camelBack }
  - { key: readability-identifier-naming.GlobalConstantCase,       value: camelBack }
  - { key: readability-identifier-naming.MemberConstantCase,       value: camelBack }
  - { key: readability-identifier-naming.StaticConstantCase,       value: camelBack }
  - { key: readability-identifier-naming.TypeAliasCase,            value: CamelCase }
  - { key: readability-identifier-naming.TypedefCase,              value: CamelCase }
  - { key: readability-identifier-naming.TypeAliasIgnoredRegexp,   value: 'type' }
  - { key: readability-identifier-naming.TypedefIgnoredRegexp,     value: 'type' }
  - { key: readability-identifier-naming.FunctionCase,             value: CamelCase }
  - { key: readability-identifier-naming.FunctionIgnoredRegexp,    value: "(hash)|(data|begin|end|size|empty|range_begin|range_end|assign|insert|cbegin|cend|clear)" }
  - { key: readability-identifier-naming.EnumCase,                 value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantCase,         value: aNy_CasE  }
  - { key: readability-identifier-naming.ScopedEnumConstantCase,   value: camelBack }
  - { key: readability-identifier-naming.TemplateParameterCase,    value: CamelCase }
  - { key: readability-identifier-naming.NamespaceCase,            value: lower_case }
  - { key: readability-identifier-naming.MacroDefinitionCase,      value: UPPER_CASE }
  - { key: modernize-use-override, value: AllowOverrideAndFinal }
